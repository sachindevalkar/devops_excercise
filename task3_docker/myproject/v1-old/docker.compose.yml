version: '3.8'

services:
  # Frontend Service (Nginx)
  frontend:
    image: nginx:latest
    container_name: frontend
    ports:
      - "80:80"  # Mapping host port 80 to container port 80
    volumes:
      - ./frontend:/usr/share/nginx/html:ro  # Serve static files from host to container
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro  # Custom Nginx configuration file
    networks:
      - frontend-backend-net  # Attach to the frontend-backend network
    depends_on:
      - backend  # Ensure the backend service starts before frontend

  # Backend API Service (Assumed Node.js application in this example)
  backend:
    build:
      context: ./backend  # Path to the backend directory with Dockerfile
    container_name: backend
    environment:
      - DB_HOST=database  # Database service hostname in the same network
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD_FILE=/run/secrets/db_password  # Use Docker secret for password
      - DB_NAME=${DB_NAME}
    networks:
      - frontend-backend-net  # Attach to the frontend-backend network
      - backend-db-net  # Attach to the backend-database network
    deploy:
      resources:
        limits:
          cpus: '0.5'  # Set CPU resource limit for the backend service
          memory: 500M  # Set memory resource limit for the backend service
    secrets:
      - db_password  # Use Docker secrets to securely manage the DB password

  # Database Service (PostgreSQL)
  database:
    image: postgres:latest
    container_name: database
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password  # Use Docker secret for DB password
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data  # Use persistent volume for DB data
    networks:
      - backend-db-net  # Attach to the backend-database network
    secrets:
      - db_password  # Use Docker secret to pass the DB password securely
    restart: always

# Secrets
secrets:
  db_password:
    file: ./secrets/db_password.txt  # Path to file containing DB password

# Volumes
volumes:
  db_data:  # Volume for persisting database data
    driver: local
  frontend:  # Volume for serving static files to Nginx
    driver: local

# Networks
networks:
  frontend-backend-net:
    driver: bridge  # Custom network for frontend and backend communication
  backend-db-net:
    driver: bridge  # Separate network for backend and database communication

